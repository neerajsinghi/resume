'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var smartSections = require('smart-sections');

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Section = function (_Component) {
  inherits(Section, _Component);

  function Section() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, Section);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Section.__proto__ || Object.getPrototypeOf(Section)).call.apply(_ref, [this].concat(args))), _this), _this.handleRef = function (domElement) {
      return _this.domElement = domElement;
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(Section, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.unregister = smartSections.spy.registerSection(this.props.name, this.domElement);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unregister();
    }
  }, {
    key: 'render',
    value: function render() {
      var handleRef = this.handleRef;
      var _props = this.props,
          render = _props.render,
          component = _props.component,
          children = _props.children,
          restProps = objectWithoutProperties(_props, ['render', 'component', 'children']);

      if (typeof component === 'string') {
        return React__default.createElement(component, _extends({ children: children }, restProps));
      }
      if (component) {
        return React__default.createElement(component, _extends({ children: children, render: render }, restProps));
      }
      if (typeof render === 'function') {
        return render({ children: children, handleRef: handleRef });
      }
      return React__default.createElement(
        'div',
        _extends({}, restProps, { ref: handleRef }),
        children
      );
    }
  }]);
  return Section;
}(React.Component);
Section.propTypes = {
  name: PropTypes.string.isRequired,
  render: PropTypes.func,
  component: PropTypes.func,
  children: PropTypes.node
};

var SectionSpy = function (_Component) {
  inherits(SectionSpy, _Component);

  function SectionSpy() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SectionSpy);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SectionSpy.__proto__ || Object.getPrototypeOf(SectionSpy)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      section: {}
    }, _this.handleSectionStateChange = function (newState) {
      _this.setState({ section: newState });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SectionSpy, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      if (this.props.name !== newProps.name) {
        smartSections.spy.removeSectionSpy(this.props.name, this.handleSectionStateChange);
        smartSections.spy.addSectionSpy(newProps.name, this.handleSectionStateChange);
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.unregister = smartSections.spy.registerSectionSpy(this.props.name, this.handleSectionStateChange);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unregister();
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.render(this.state.section);
    }
  }]);
  return SectionSpy;
}(React.Component);
SectionSpy.propTypes = {
  name: PropTypes.string.isRequired,
  render: PropTypes.func.isRequired
};

var SectionsSpy = function (_Component) {
  inherits(SectionsSpy, _Component);

  function SectionsSpy() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, SectionsSpy);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SectionsSpy.__proto__ || Object.getPrototypeOf(SectionsSpy)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      sections: []
    }, _this.handleScrollStateChange = function (newState) {
      _this.setState({ sections: newState });
    }, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(SectionsSpy, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.unregister = smartSections.spy.registerScrollSpy(this.handleScrollStateChange);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unregister();
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.render(this.state.sections);
    }
  }]);
  return SectionsSpy;
}(React.Component);
SectionsSpy.propTypes = {
  render: PropTypes.func.isRequired
};

exports.Section = Section;
exports.SectionSpy = SectionSpy;
exports.SectionsSpy = SectionsSpy;
