{"ast":null,"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { spy } from 'smart-sections';\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Section = function (_Component) {\n  inherits(Section, _Component);\n\n  function Section() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, Section);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Section.__proto__ || Object.getPrototypeOf(Section)).call.apply(_ref, [this].concat(args))), _this), _this.handleRef = function (domElement) {\n      return _this.domElement = domElement;\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(Section, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.unregister = spy.registerSection(this.props.name, this.domElement);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unregister();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var handleRef = this.handleRef;\n      var _props = this.props,\n          render = _props.render,\n          component = _props.component,\n          children = _props.children,\n          restProps = objectWithoutProperties(_props, ['render', 'component', 'children']);\n\n      if (typeof component === 'string') {\n        return React.createElement(component, _extends({\n          children: children\n        }, restProps));\n      }\n\n      if (component) {\n        return React.createElement(component, _extends({\n          children: children,\n          render: render\n        }, restProps));\n      }\n\n      if (typeof render === 'function') {\n        return render({\n          children: children,\n          handleRef: handleRef\n        });\n      }\n\n      return React.createElement('div', _extends({}, restProps, {\n        ref: handleRef\n      }), children);\n    }\n  }]);\n  return Section;\n}(Component);\n\nSection.propTypes = {\n  name: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  component: PropTypes.func,\n  children: PropTypes.node\n};\n\nvar SectionSpy = function (_Component) {\n  inherits(SectionSpy, _Component);\n\n  function SectionSpy() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, SectionSpy);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SectionSpy.__proto__ || Object.getPrototypeOf(SectionSpy)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      section: {}\n    }, _this.handleSectionStateChange = function (newState) {\n      _this.setState({\n        section: newState\n      });\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(SectionSpy, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(newProps) {\n      if (this.props.name !== newProps.name) {\n        spy.removeSectionSpy(this.props.name, this.handleSectionStateChange);\n        spy.addSectionSpy(newProps.name, this.handleSectionStateChange);\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.unregister = spy.registerSectionSpy(this.props.name, this.handleSectionStateChange);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unregister();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.props.render(this.state.section);\n    }\n  }]);\n  return SectionSpy;\n}(Component);\n\nSectionSpy.propTypes = {\n  name: PropTypes.string.isRequired,\n  render: PropTypes.func.isRequired\n};\n\nvar SectionsSpy = function (_Component) {\n  inherits(SectionsSpy, _Component);\n\n  function SectionsSpy() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    classCallCheck(this, SectionsSpy);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = SectionsSpy.__proto__ || Object.getPrototypeOf(SectionsSpy)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      sections: []\n    }, _this.handleScrollStateChange = function (newState) {\n      _this.setState({\n        sections: newState\n      });\n    }, _temp), possibleConstructorReturn(_this, _ret);\n  }\n\n  createClass(SectionsSpy, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.unregister = spy.registerScrollSpy(this.handleScrollStateChange);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.unregister();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.props.render(this.state.sections);\n    }\n  }]);\n  return SectionsSpy;\n}(Component);\n\nSectionsSpy.propTypes = {\n  render: PropTypes.func.isRequired\n};\nexport { Section, SectionSpy, SectionsSpy };","map":null,"metadata":{},"sourceType":"module"}